{"version":3,"sources":["digitRoll.js"],"names":["DigitRoll","opts","this","container","document","querySelector","width","Error","style","overflow","rollHeight","getComputedStyle","height","setWidth","roll","n","self","number","parseInt","length","Array","join","forEach","call","querySelectorAll","item","i","currentNum","innerHTML","goalNum","gapNum","gapStr","j","prototype","cssText","setTimeout","str"],"mappings":"aAiBA,SAASA,UAAUC,GAClB,GAAAC,KAAKC,UAAYC,SAASC,cAAcJ,EAAKE,WAD9CD,KAAAI,MAASN,EAAUC,OAAM,GACxBC,KAAKC,UAGJ,MAAMI,MAAM,gBAEbL,KAAKC,UAAUK,MAAMC,SAAW,SAHhCP,KAAIQ,WAAMP,SAAWQ,iBAAAT,KAAAC,WAAAS,QAEpBV,KAAAQ,WAAA,IAKAR,KAAKC,UAAUK,MAAMI,OAAS,OAJ/BV,KAAKC,WAAUK,IAOfN,KAAKW,WAHJb,UAAKG,UAAUK,CAkBhBM,KAAM,SAASC,GACd,IAAIC,EAAOd,KACXA,KAAKe,OAASC,SAASH,GAAK,GACxBb,KAAKe,OAAOE,OAASjB,KAAKI,MAC7BJ,KAAKe,OAAS,IAAIG,MAAMlB,KAAKI,MAAQJ,KAAKe,OAAOE,OAAS,GAAGE,KAAK,KAAOnB,KAAKe,OACpEf,KAAKe,OAAOE,OAASjB,KAAKI,QACpCJ,KAAKI,MAAQJ,KAAKe,OAAOE,OACzBjB,KAAKW,YANNO,MAAIJ,UAAOM,QAAXC,KAAArB,KAAAC,UAAAqB,iBAAA,QAAA,SAAAC,EAAAC,GACA,IAAAC,EAAcT,SAAAO,EAAdpB,cAAA,kBAAAuB,WASKC,EAAUX,SAASF,EAAKC,OAAOS,IARpCI,EAASb,EACRc,EAAKd,GACL,GAFDU,GAEgBV,EAAf,CAEA,GAAKJ,EAALgB,EAAA,CACAC,EAAAD,EAAAF,EAUC,IAAK,IAAIK,EAAIL,EAAYK,EAAIH,EAAU,EAAGG,IAT5CZ,GAAMa,QAAUX,EAAQC,aAYhB,CAVPO,EAAID,GAAOF,EAAYX,EAYtB,IAASgB,EAAIL,EAAYK,EAAI,GAAIA,IAXlCD,GAAID,QAAYE,EAAA,SAChB,IAAID,EAAM,EAAGC,EAAbH,EAAA,EAAAG,IAcED,GAAU,QAAUC,EAAI,SAZzBP,EAAAjB,MAAA0B,SAAA,iEACAT,EAFDG,UAEWD,EAAwBQ,WAAA,WAClCL,EAAAA,MAAMI,SAAU,gEAAhBlB,EAAAN,WAAAoB,EAAA,OAiBE,QATDjB,SAAA,SAAAE,GAoBHA,EAAIA,GAAKb,KAAKI,MAlBXyB,IADD,IAAAK,EAAA,GACCL,EAAAA,EAAML,EAAIX,EAAAW,IACVU,GAAA,8DAAAlC,KAAAQ,WAAA,yBAsBHR,KAAKC,UAAUyB,UAAYQ","file":"../digitRoll.js","sourcesContent":["/**\n * H5数字滚动效果\n * @class DigitRoll\n * @desc 没有任何依赖, 只兼容webkit内核, 主要用于H5页面. 组件本身没有css, 如果需要修改默认样式 可以添加css样式修饰.\n * @param {object} opts 实例化参数\n * @param {string} opts.container 容器选择器 selector\n * @param {number} opts.width=1 数字的总宽度个数, 即要显示几位数\n * @example\n\t\tHTML:\n\t\t<div id=\"num-roll\"></div>\n * @example\n\t\tjs:\n\t\tvar r1=new DigitRoll({\n\t\t\t\tcontainer:'#num-roll',\n\t\t\t\twidth:9\n\t\t});\n */\nfunction DigitRoll(opts) {\n\tthis.container = document.querySelector(opts.container); //容器\n\tthis.width = opts.width || 1;\n\tif (!this.container) {\n\t\tthrow Error('no container');\n\t}\n\tthis.container.style.overflow = 'hidden';\n\tthis.rollHeight = parseInt(getComputedStyle(this.container).height); //容器高度 也用于滚动间隔距离\n\n\tif (this.rollHeight < 1) { //只有容器的高度是必选样式  如果没有设置 那就给一个默认的\n\t\tthis.container.style.height = '80px';\n\t\tthis.rollHeight = 80;\n\t}\n\tthis.setWidth();\n}\n/**  @lends DigitRoll */\nDigitRoll.prototype = {\n\t/**\n\t * 滚动数字\n\t * @param {number} n 要滚动的数字\n\t * @example\n\t\t\tr1.roll(314159);\n\n\t\t\t//定时更新\n\t\t\tsetInterval(function(){\n\t\t\t\t\tr1.roll(314159);\n\t\t\t},5000)\n\t */\n\troll: function(n) {\n\t\tvar self = this;\n\t\tthis.number = parseInt(n) + '';\n\t\tif (this.number.length < this.width) {\n\t\t\tthis.number = new Array(this.width - this.number.length + 1).join('0') + this.number;\n\t\t} else if (this.number.length > this.width) {\n\t\t\tthis.width = this.number.length;\n\t\t\tthis.setWidth();\n\t\t}\n\t\tArray.prototype.forEach.call(this.container.querySelectorAll('.num'), function(item, i) {\n\t\t\tvar currentNum = parseInt(item.querySelector('div:last-child').innerHTML); //当前数字\n\t\t\tvar goalNum = parseInt(self.number[i]); //目标数字\n\t\t\tvar gapNum = 0; //数字滚动的间隔个数\n\t\t\tvar gapStr = '';\n\t\t\tif (currentNum == goalNum) { //数字没变 不处理\n\t\t\t\treturn;\n\t\t\t} else if (currentNum < goalNum) { // 比如数字从1到3\n\t\t\t\tgapNum = goalNum - currentNum;\n\t\t\t\tfor (var j = currentNum; j < goalNum + 1; j++) {\n\t\t\t\t\tgapStr += '<div>' + j + '</div>'\n\t\t\t\t}\n\t\t\t} else { // 比如 数字从6到5  因为所有情况都是从下往上滚动 所以如果是6到5的话 要滚动9个数字\n\t\t\t\tgapNum = 10 - currentNum + goalNum;\n\t\t\t\tfor (var j = currentNum; j < 10; j++) {\n\t\t\t\t\tgapStr += '<div>' + j + '</div>'\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < goalNum + 1; j++) {\n\t\t\t\t\tgapStr += '<div>' + j + '</div>'\n\t\t\t\t}\n\t\t\t}\n\t\t\titem.style.cssText += '-webkit-transition-duration:0s;-webkit-transform:translateY(0)'; //重置位置\n\t\t\titem.innerHTML = gapStr;\n\t\t\tsetTimeout(function() {\n\t\t\t\titem.style.cssText += '-webkit-transition-duration:1s;-webkit-transform:translateY(-' + self.rollHeight * gapNum + 'px)';\n\t\t\t}, 50)\n\t\t})\n\t},\n\t/**\n\t * 重置宽度\n\t * @desc 一般用不到这个方法\n\t * @param {number} n 宽度 即数字位数\n\t * @example\n\t\t\tr1.setWidth(10);\n\t */\n\tsetWidth: function(n) {\n\t\tn = n || this.width;\n\t\tvar str = '';\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tstr += '<div class=\"num\" style=\"float:left;height:100%;line-height:' + this.rollHeight + 'px\"><div>0</div></div>';\n\t\t}\n\t\tthis.container.innerHTML = str;\n\t}\n}"]}